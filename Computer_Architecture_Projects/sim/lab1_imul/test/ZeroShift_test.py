from pymtl3 import *
from pymtl3.stdlib.test_utils import config_model_with_cmdline_opts, run_test_vector_sim

from ..CheckZeroIntervals import CheckZeroIntervals

def test_happy_cases(cmdline_opts):
    # this can be refactored with a loop
    run_test_vector_sim( CheckZeroIntervals(), [
        ('in_   out*'),
        [0b11111111111111111111111111111111, 0b00000000000000000000000000000000],
        [0b11111111111111111111111111111110, 0b00000000000000000000000000000001],
        [0b11111111111111111111111111111100, 0b00000000000000000000000000000011],
        [0b11111111111111111111111111111000, 0b00000000000000000000000000000111],
        [0b11111111111111111111111111110000, 0b00000000000000000000000000001111],
        [0b11111111111111111111111111100000, 0b00000000000000000000000000011111],
        [0b11111111111111111111111111000000, 0b00000000000000000000000000111111],
        [0b11111111111111111111111110000000, 0b00000000000000000000000001111111],
        [0b11111111111111111111111100000000, 0b00000000000000000000000011111111],
        [0b11111111111111111111111000000000, 0b00000000000000000000000111111111],
        [0b11111111111111111111110000000000, 0b00000000000000000000001111111111],
        [0b11111111111111111111100000000000, 0b00000000000000000000011111111111],
        [0b11111111111111111111000000000000, 0b00000000000000000000111111111111],
        [0b11111111111111111110000000000000, 0b00000000000000000001111111111111],
        [0b11111111111111111100000000000000, 0b00000000000000000011111111111111],
        [0b11111111111111111000000000000000, 0b00000000000000000111111111111111],
        [0b11111111111111110000000000000000, 0b00000000000000001111111111111111],
        [0b11111111111111100000000000000000, 0b00000000000000011111111111111111],
        [0b11111111111111000000000000000000, 0b00000000000000111111111111111111],
        [0b11111111111110000000000000000000, 0b00000000000001111111111111111111],
        [0b11111111111100000000000000000000, 0b00000000000011111111111111111111],
        [0b11111111111000000000000000000000, 0b00000000000111111111111111111111],
        [0b11111111110000000000000000000000, 0b00000000001111111111111111111111],
        [0b11111111100000000000000000000000, 0b00000000011111111111111111111111],
        [0b11111111000000000000000000000000, 0b00000000111111111111111111111111],
        [0b11111110000000000000000000000000, 0b00000001111111111111111111111111],
        [0b11111100000000000000000000000000, 0b00000011111111111111111111111111],
        [0b11111000000000000000000000000000, 0b00000111111111111111111111111111],
        [0b11110000000000000000000000000000, 0b00001111111111111111111111111111],
        [0b11100000000000000000000000000000, 0b00011111111111111111111111111111],
        [0b11000000000000000000000000000000, 0b00111111111111111111111111111111],
        [0b10000000000000000000000000000000, 0b01111111111111111111111111111111],
        [0b00000000000000000000000000000000, 0b11111111111111111111111111111111],
    ], cmdline_opts )

def test_holes(cmdline_opts):
    run_test_vector_sim( CheckZeroIntervals(), [
        ('in_   out*'),
        [0b00000000000000000000000000000001, 0b00000000000000000000000000000000],
        [0b00000000000000000000000000000010, 0b00000000000000000000000000000001],        
        [0b00000000000000000000000000000100, 0b00000000000000000000000000000011],
        [0b00000000000000000000000000001000, 0b00000000000000000000000000000111],
        [0b00000000000000000000000000010000, 0b00000000000000000000000000001111],
        [0b00000000000000000000000000100000, 0b00000000000000000000000000011111],
        [0b00000000000000000000000001000000, 0b00000000000000000000000000111111],
        [0b00000000000000000000000010000000, 0b00000000000000000000000001111111],
        [0b00000000000000000000000100000000, 0b00000000000000000000000011111111],
        [0b00000000000000000000001000000000, 0b00000000000000000000000111111111],
        [0b00000000000000000000010000000000, 0b00000000000000000000001111111111],
        [0b00000000000000000000100000000000, 0b00000000000000000000011111111111],
        [0b00000000000000000001000000000000, 0b00000000000000000000111111111111],
        [0b00000000000000000010000000000000, 0b00000000000000000001111111111111],
        [0b00000000000000000100000000000000, 0b00000000000000000011111111111111],
        [0b00000000000000001000000000000000, 0b00000000000000000111111111111111],
        [0b00000000000000010000000000000000, 0b00000000000000001111111111111111],
        [0b00000000000000100000000000000000, 0b00000000000000011111111111111111],
        [0b00000000000001000000000000000000, 0b00000000000000111111111111111111],
        [0b00000000000010000000000000000000, 0b00000000000001111111111111111111],
        [0b00000000000100000000000000000000, 0b00000000000011111111111111111111],
        [0b00000000001000000000000000000000, 0b00000000000111111111111111111111],
        [0b00000000010000000000000000000000, 0b00000000001111111111111111111111],
        [0b00000000100000000000000000000000, 0b00000000011111111111111111111111],
        [0b00000001000000000000000000000000, 0b00000000111111111111111111111111],
        [0b00000010000000000000000000000000, 0b00000001111111111111111111111111],
        [0b00000100000000000000000000000000, 0b00000011111111111111111111111111],
        [0b00001000000000000000000000000000, 0b00000111111111111111111111111111],
        [0b00010000000000000000000000000000, 0b00001111111111111111111111111111],
        [0b00100000000000000000000000000000, 0b00011111111111111111111111111111],
        [0b01000000000000000000000000000000, 0b00111111111111111111111111111111],
        [0b10000000000000000000000000000000, 0b01111111111111111111111111111111],
    ], cmdline_opts )